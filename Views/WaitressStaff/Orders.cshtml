﻿@using RestaurantSystem.Enums
@using RestaurantSystem.Models
@using RestaurantSystem.Models.DatabaseModels
@using RestaurantSystem.Models.View.Staff.Waitress
@using RestaurantSystem.Models.View.Messages
@model OrdersViewModel;
@{
    ViewData["Title"] = "Staff Orders - Savans Restaurant";
}

<head>
    @await Html.PartialAsync("_Header")
    <script src="/assets/staff/waitress/orders_staff.js"></script>
</head>

<body>
    @await Html.PartialAsync("_StaffNavBar", Model.Staff)
    @await Html.PartialAsync("_RestaurantBar", Model.Staff.Restaurant)

    <!-- Page Header -->
    <div class="bg-warning bg-gradient py-4 mb-4">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8 text-dark">
                    <h1 class="display-6 mb-3 fw-bold">
                        <i class="bi bi-receipt me-2 text-dark"></i> Your Orders
                    </h1>
                    <p class="mb-0 fw-medium">Manage the orders for Savans Restaurant</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a class="btn btn-dark btn-lg px-4 py-3 shadow-lg" href="/staff/orders/dishes">
                        <i class="bi bi-plus-circle me-2"></i>
                        Create New Order
                    </a>
                </div>
            </div>
        </div>
    </div>

<!-- Paging Component -->
        <div class="mb-4">
            @await Html.PartialAsync("_Paging", Model.Page)
        </div>

    <div class="container-fluid py-4">
        <!-- Alert Messages -->
        @await Html.PartialAsync("_SuccessMessage", new MessageViewModel
        {
            Key = "OrderedSuccess",
            Message = "Order placed successfully!"
        })

        @await Html.PartialAsync("_SuccessMessage", new MessageViewModel
        {
            Key = "DeletedOrderSuccess",
            Message = "Order deleted successfully!"
        })

        @await Html.PartialAsync("_SuccessMessage", new MessageViewModel
        {
            Key = "ServedOrderSuccess",
            Message = "Order served successfully!"
        })

        @await Html.PartialAsync("_SuccessMessage", new MessageViewModel
        {
            Key = "UnservedOrderSuccess",
            Message = "Order unserved successfully!"
        })

        <!-- Empty State -->
        @if (Model.Orders.Count == 0)
        {
            <div class="row justify-content-center">
                <div class="col-md-8 col-lg-6">
                    <div class="card border-warning shadow-sm">
                        <div class="card-body text-center py-5">
                            <div class="mb-4">
                                <i class="bi bi-receipt display-1 text-warning opacity-75"></i>
                            </div>
                            <h3 class="text-warning fw-bold mb-3">No Orders Yet</h3>
                            <p class="text-muted mb-4 fs-5">Orders will appear here once customers start placing them or when you create new orders.</p>
                            <a href="/staff/orders/dishes" class="btn btn-warning btn-lg px-4 py-3">
                                <i class="bi bi-plus-circle me-2"></i>
                                Create Your First Order
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
        <!-- Orders Grid -->
        <div class="row g-4">
            @foreach (OrderWithDishesCountModel orderWithDishesCount in Model.Orders)
            {
                OrderModel order = orderWithDishesCount.Order;

                <script>
                    registeredOrders.push(String(@order.Id))
                </script>

                <div class="col-lg-6 col-xl-4">
                    <div class="card border-warning shadow-lg h-100">
                        <!-- Order Header -->
                        <div class="card-header bg-dark border-warning py-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0 fw-bold text-light">
                                    <i class="bi bi-receipt me-2 text-warning"></i>
                                    Order #@order.Id
                                </h5>
                                <div class="mt-2 mt-md-0">
                                    <span class="badge bg-@(GetStatusBadgeColor(order.CurrentStatus)) fs-6 px-3 py-2 text-dark fw-bold" id="orderstatus,@order.Id">
                                        <i class="bi bi-@(GetStatusIcon(order.CurrentStatus)) me-1"></i>
                                        @order.CurrentStatus
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="card-body p-0">
                            <!-- Dishes Section -->
                            <div class="p-4">
                                <h6 class="text-warning fw-bold mb-3">
                                    <i class="bi bi-basket3 me-2"></i>
                                    Order Items
                                </h6>
                                
                                @foreach (DishWithStatusModel dishWithStatus in orderWithDishesCount.DishesCount.Keys)
                                {
                                    <div class="card border-warning mb-3">
                                        <div class="card-body py-3">
                                            <div class="row align-items-center">
                                                <div class="col-auto">
                                                    <div class="position-relative">
                                                        @if (dishWithStatus.Dish.Image != null)
                                                        {
                                                            <img src="@dishWithStatus.Dish.Image" class="img-fluid rounded border border-warning object-fit-cover" width="80" height="80" />
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-warning bg-opacity-25 rounded d-flex align-items-center justify-content-center border border-warning" style="width: 80px; height: 80px;">
                                                                <i class="bi bi-image text-warning fs-3"></i>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div>
                                                            <h6 class="mb-1 fw-bold">@dishWithStatus.Dish.Name</h6>
                                                            <p class="text-muted small mb-1">
                                                                <i class="bi bi-clock me-1"></i>
                                                                <strong>Est. time:</strong> @dishWithStatus.Dish.AverageTimeToCook
                                                            </p>
                                                            <span class="badge bg-secondary small text-white">
                                                                <strong>Quantity:</strong> @orderWithDishesCount.DishesCount[dishWithStatus]
                                                            </span>
                                                        </div>
                                                        <div class="text-end">
                                                            <span class="badge bg-@(GetStatusBadgeColorDish(dishWithStatus.OrderedDish.CurrentStatus)) mb-2 text-dark" id="dishstatus,@order.Id,@dishWithStatus.Dish.Id">
                                                                <i class="bi bi-@(GetStatusIconDish(dishWithStatus.OrderedDish.CurrentStatus)) me-1 text-dark"></i>
                                                                @dishWithStatus.OrderedDish.CurrentStatus
                                                            </span>
                                                            <div class="fw-bold text-warning">
                                                                @((dishWithStatus.Dish.Price * orderWithDishesCount.DishesCount[dishWithStatus]).ToString("F2")) lv.
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Order Summary -->
                        <div class="card-footer border border-warning p-4">
                            <div class="border border-warning bg-warning bg-opacity-10 rounded p-3 mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="text-warning fw-bold mb-0">
                                        <i class="bi bi-info-circle me-2"></i>Order Summary
                                    </h6>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="text-muted">Total Price:</span>
                                    <span class="fw-bold text-warning fs-5">@order.TotalPrice lv.</span>
                                </div>
                                @if (order.CuponCode != null)
                                                {
                                                    <div class="d-flex justify-content-between mb-2">
                                                        <span class="text-muted">Used Cupon Code:</span>
                                                        <span class="fw-bold text-success fs-5">
                                                            <i class="bi bi-tag text-success"></i> @order.Cupon.CuponCode
                                                        </span>
                                                    </div>
                                                    <div class="d-flex justify-content-between mb-2">
                                                        <span class="text-muted">Cupon Discount:</span>
                                                        <span class="fw-bold text-success fs-5">
                                                            @order.Cupon.DiscountPercent%
                                                        </span>
                                                    </div>
                                                }
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="text-muted">Ordered At:</span>
                                    <span class="text-muted">@order.OrderedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                </div>
                            </div>

                            <div class="mb-3">
                                    <h6 class="text-warning fw-bold mb-2">
                                        <i class="bi bi-geo-alt me-2"></i>Service Type
                                    </h6>
                                </div>
                            @if (order.TableNumber != null)
                            {
                                <div class="mb-3">
                                    <span class="badge bg-warning text-dark fs-6 px-3 py-2 fw-bold">
                                        <i class="bi bi-table me-1"></i>
                                        Table @order.TableNumber
                                    </span>
                                </div>
                                    
                            }
                            else
                            {
                                <div class="mb-3">
                                    <h6 class="badge bg-warning text-dark w-bold mb-2 fs-6 px-3 py-2 fw-bold">
                                        <i class="bi bi-truck me-2"></i>Delivery
                                    </h6>
                                </div>

                                <div class="mb-3">
                                    <h6 class="text-warning fw-bold mb-2">
                                        <i class="bi bi-person me-2"></i>Customer Details
                                    </h6>
                                    <div class="text-muted mb-1">
                                        <i class="bi bi-person me-1"></i>
                                        @order.User.Name
                                    </div>
                                    <div class="text-muted small">
                                        <i class="bi bi-envelope me-1"></i>
                                        @order.User.Email
                                    </div>
                                </div>
                            }

                                <div class="mb-3">
                                    <h6 class="text-warning fw-bold mb-2">
                                        <i class="bi bi-chat-left-text me-2"></i>Special Notes
                                    </h6>
                                    <div class="bg-warning bg-opacity-10 p-3 rounded border border-warning">
                                        <i class="bi bi-chat-dots me-2 text-warning"></i>
                                        <span class="text-muted mb-0 fst-italic">@order.Notes</span>
                                    </div>
                                </div>
                            

                            <!-- Action Buttons -->
                            <div class="d-grid gap-2 mt-3">
                                @if (order.TableNumber == null && order.CurrentStatus.Equals(OrderStatusEnum.Delivered))
                                {
                                    <button onclick="deleteOrder('@order.Id')" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-trash me-2"></i>
                                        Remove Order
                                    </button>
                                }
                                else if (order.TableNumber != null && order.CurrentStatus.Equals(OrderStatusEnum.Ready))
                                {
                                    <button onclick="servedOrder('@order.Id')" class="btn btn-warning btn-lg text-white fw-bold">
                                        <i class="bi bi-check-circle me-2"></i>
                                        Mark as Served
                                    </button>
                                }
                                else if (order.TableNumber != null && order.CurrentStatus.Equals(OrderStatusEnum.Served))
                                {
                                    <div class="d-flex gap-2">
                                        <button onclick="unserveOrder('@order.Id')" class="btn btn-outline-danger btn-sm flex-fill">
                                            <i class="bi bi-arrow-counterclockwise me-1"></i>
                                            Unserve
                                        </button>
                                        <button onclick="deleteOrder('@order.Id')" class="btn btn-outline-danger btn-sm flex-fill">
                                            <i class="bi bi-trash me-1"></i>
                                            Delete
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteOrder('@order.Id')">
                                        <i class="bi bi-x-circle me-2"></i>
                                        Cancel Order
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @await Html.PartialAsync("_RestaurantFooter")
    </div>

    @if (Model.Orders.Count > 0)
    {
        <script>
            startWebSocket()
        </script>
    }
    @await Html.PartialAsync("_Footer")
</body>


@functions{
    private string GetStatusBadgeColor(OrderStatusEnum status)
    {
        return status switch
        {
            OrderStatusEnum.Pending => "warning",
            OrderStatusEnum.Preparing => "info",
            OrderStatusEnum.Ready => "success",
            OrderStatusEnum.Served => "success",
            OrderStatusEnum.Delivering => "primary",
            OrderStatusEnum.Delivered => "success",
            _ => "secondary"
        };
    }

    private string GetStatusBadgeColorDish(DishStatusEnum status)
    {
        return status switch
        {
            DishStatusEnum.Pending => "warning",
            DishStatusEnum.Preparing => "info",
            DishStatusEnum.Ready => "success",
            _ => "secondary"
        };
    }

    private string GetStatusIcon(OrderStatusEnum status)
    {
        return status switch
        {
            OrderStatusEnum.Pending => "hourglass-split",
            OrderStatusEnum.Preparing => "fire",
            OrderStatusEnum.Ready => "check2",
            OrderStatusEnum.Served => "check2-all",
            OrderStatusEnum.Delivering => "truck",
            OrderStatusEnum.Delivered => "check2-all",
            _ => "question-circle"
        };
    }

    private string GetStatusIconDish(DishStatusEnum status)
    {
        return status switch
        {
            DishStatusEnum.Pending => "hourglass-split",
            DishStatusEnum.Preparing => "fire",
            DishStatusEnum.Ready => "check2",
            _ => "question-circle"
        };
    }
    private string GetDishIcon(DishTypeEnum dishType)
    {
        return dishType switch
        {
            DishTypeEnum.salads => "leaf-fill",
            DishTypeEnum.soups => "cup-hot",
            DishTypeEnum.appetizers => "flower1",
            DishTypeEnum.dishes => "flower1",
            DishTypeEnum.desserts => "cake2",
            DishTypeEnum.drinks => "cup-straw",
            _ => "dish"
        };
    }
}