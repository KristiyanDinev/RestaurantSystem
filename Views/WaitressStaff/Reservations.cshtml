@using RestaurantSystem.Enums;
@using RestaurantSystem.Models.DatabaseModels;
@using RestaurantSystem.Models.View.Staff.Waitress
@model ReservationViewModel;
@{
    ViewData["Title"] = "Reservations";
}


<head>
    @await Html.PartialAsync("_Header")

    <script src='~/assets/staff/waitress/reservations_staff.js'></script>
</head>

<body>
    @await Html.PartialAsync("_StaffNavBar", Model.Staff)

    @await Html.PartialAsync("_RestaurantBar", Model.Staff.Restaurant)

    @foreach (ReservationModel reservation in Model.Reservations)
    {
        <div class="card card-body m-4">
            <h4 class="card-title">Contact Information</h4>
            <p class="card-text">Name: @reservation.User.Name</p>
            <p class="card-text">Email: @reservation.User.Email</p>
            <p class="card-text">Phone: @reservation.PhoneNumber</p>
            @if (reservation.User.Image != null)
            {
                <img class="img-thumbnail rounded m-2" src="@reservation.User.Image" />
            }

            <h4 class="card-title">Reservation</h4>
            <p class="card-text">Current Status: @reservation.CurrentStatus</p>
            <p class="card-text">Reservation At: @reservation.At_Date.ToLocalTime()</p>
            <p class="card-text">Reserved At: @reservation.Created_At.ToLocalTime()</p>
            <p class="card-text">Adults: @reservation.Amount_Of_Adults</p>
            <p class="card-text">Children: @reservation.Amount_Of_Children</p>

            <p class="card-text">Total Price: @reservation.TotalPrice lv.</p>

            <div class="card-text">
                <p class="card-text">Notes: </p>
                <p class="card-text">@reservation.Notes</p>
            </div>

            @{
                string pending = ReservationStatusEnum.Pending.ToString();
                string accepted = ReservationStatusEnum.Accepted.ToString();
                string cancelled = ReservationStatusEnum.Cancelled.ToString();
                string currentStatus = reservation.CurrentStatus.ToString();

                @if (currentStatus.Equals(pending, StringComparison.OrdinalIgnoreCase))
                {
                    <button type="button" class="btn btn-success m-2"
                            onclick="changeStatus('@reservation.Id', '@accepted')">
                            Accept
                    </button>

                    <button type="button" class="btn btn-danger m-2"
                            onclick="changeStatus('@reservation.Id', '@cancelled')">
                            Cancel
                    </button>

                } else if (currentStatus.Equals(accepted, StringComparison.OrdinalIgnoreCase))
                {
                    <button type="button" class="btn btn-primary m-2"
                            onclick="changeStatus('@reservation.Id', '@pending')">
                            Pending
                    </button>

                    <button type="button" class="btn btn-danger m-2"
                            onclick="changeStatus('@reservation.Id', '@cancelled')">
                            Cancel
                    </button>

                } else if (currentStatus.Equals(cancelled, StringComparison.OrdinalIgnoreCase))
                {
                    <button type="button" class="btn btn-danger m-2"
                            onclick="deleteReservation('@reservation.Id')">
                            Delete
                    </button>
                }
                            
            }

            <p id="error,@reservation.Id"></p>
        </div>
    }


    @await Html.PartialAsync("_Footer")
    <script src="~/assets/index.js"></script>
</body>


