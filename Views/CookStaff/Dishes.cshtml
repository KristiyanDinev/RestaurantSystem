@using RestaurantSystem.Models;
@using RestaurantSystem.Models.DatabaseModels;
@using RestaurantSystem.Enums;
@model RestaurantSystem.Models.View.Staff.DishesViewModel;

@{
    ViewData["Title"] = "Cook";
}

<!DOCTYPE html>

<head>
    @await Html.PartialAsync("_Imports")

    <script src='~/assets/staff/cook/cook.js'></script>
    <link rel='stylesheet' type='text/css' media='screen' href='~/assets/index.css'>
    <link rel='stylesheet' type='text/css' media='screen' href='~/assets/single_dish/single_dish.css'>
</head>


<body>
    @await Html.PartialAsync("_StaffNavBar", Model.Staff)

    @await Html.PartialAsync("_RestaurantBar", Model.Staff.Restaurant)

    @if (Model.OrderWithDishesCount.Count > 0)
    {
        <h1>All Dishes to cook per order.</h1>

    } else
    {
        <h1>No Dishes to cook.</h1>
    }

    <div>
        @foreach (OrderWithDishesCountModel orderWithDishesCount in Model.OrderWithDishesCount)
        {
            OrderModel order = orderWithDishesCount.Order;

            <script>
                registeredOrders.push(Number(@order.Id))
            </script>

            <div class="order_view">

                <p class="status" id="orderstatus,@order.Id">
                    CurrentStatus: @order.CurrentStatus
                </p>

                <div class="notes_view">
                    <p class="notes_title">Notes: </p>
                    <p class="notes">@order.Notes</p>
                </div>

                <p class="part">@order.OrderedAt</p>

                <p class="part">TotalPrice: @order.TotalPrice</p>

                @foreach (DishWithStatusModel dishWithStatus in orderWithDishesCount.DishesCount.Keys)
                {
                    <div class="menu">

                        <p class="part">Amount: @orderWithDishesCount.DishesCount[dishWithStatus]</p>

                        <p class="part" id="dishstatus,@order.Id,@dishWithStatus.Dish.Id">
                            Dish Status: @dishWithStatus.OrderedDish.CurrentStatus</p>

                        <p class="name">@dishWithStatus.Dish.Name</p>

                        <p class="grams">grams /@dishWithStatus.Dish.Grams/</p>

                        <p class="ingr">Ingredients: @dishWithStatus.Dish.Ingredients</p>

                        @if (dishWithStatus.Dish.Image != null)
                        {
                            <img src="@dishWithStatus.Dish.Image" class="image" alt="No image for now">
                        }

                        <p class="avg_time_to_took">Avrage time to cook: @dishWithStatus.Dish.AvrageTimeToCook minute/s</p>

                        <p class="price">@dishWithStatus.Dish.Price lv.</p>

                        <p id="error,@order.Id,@dishWithStatus.Dish.Id"></p>
                        <p id="success,@order.Id,@dishWithStatus.Dish.Id"></p>

                        <div class="row noselect" 
                            id="dish_buttons,@dishWithStatus.OrderedDish.OrderId,@dishWithStatus.OrderedDish.DishId">

                        @{
                            string pending = Status.Pending.ToString();
                            string preparing = Status.Preparing.ToString();
                            string ready = Status.Ready.ToString();

                            @if (dishWithStatus.OrderedDish.CurrentStatus.Equals(pending, StringComparison.OrdinalIgnoreCase))
                            {
                                <button class="order noselect"
                                        onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@preparing')">
                                    Start cooking
                                </button>
                            }
                            else if (dishWithStatus.OrderedDish.CurrentStatus.Equals(preparing, StringComparison.OrdinalIgnoreCase))
                            {
                                <div class="row noselect">
                                    <button class="order"
                                    onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@pending')">
                                        Pending
                                    </button>

                                    <button class="order"
                                            onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@ready')">
                                        Dish Ready
                                    </button>
                                </div>

                            }
                            else if (dishWithStatus.OrderedDish.CurrentStatus.Equals(ready, StringComparison.OrdinalIgnoreCase))
                            {
                                <button class="order noselect"
                                        onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@preparing')">
                                    Preparing
                                </button>
                            }
                        }
                        </div>
                    </div>
                }
            </div>
        }
    </div>


    @if (Model.OrderWithDishesCount.Count > 0)
    {
        <script>
            startWebSocket()
        </script>
    }
</body>

