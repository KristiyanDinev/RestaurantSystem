@using RestaurantSystem.Enums;
@using RestaurantSystem.Models;
@using RestaurantSystem.Models.DatabaseModels;
@using RestaurantSystem.Models.View.Staff.Cook
@model DishesViewModel;

@{
    ViewData["Title"] = "Cook";
}

<head>
    @await Html.PartialAsync("_Header")
    <script src="~/assets/index.js"></script>
    <script src='~/assets/staff/cook/cook.js'></script>
</head>


<body>
    @await Html.PartialAsync("_StaffNavBar", Model.Staff)

    @await Html.PartialAsync("_RestaurantBar", Model.Staff.Restaurant)

    @if (Model.Orders.Count > 0)
    {
        <h1>All Dishes to cook per order</h1>

    } else
    {
        <h1>No Dishes to cook</h1>
    }

        @foreach (OrderWithDishesCountModel orderWithDishesCount in Model.Orders)
        {
            OrderModel order = orderWithDishesCount.Order;

            <script>
                registeredOrders.push(String(@order.Id))
            </script>

            <div class="card m-3">
                 <div class="card-body">
                     <p class="card-text" id="orderstatus,@order.Id">
                        CurrentStatus: @order.CurrentStatus
                     </p>
                     <p class="card-text">
                        Notes: @order.Notes
                     </p>
                     <p class="card-text">
                        Ordered At: @order.OrderedAt
                     </p>
                     <p class="card-text">
                        Total Price: @order.TotalPrice lv.
                     </p>
                @foreach (DishWithStatusModel dishWithStatus in orderWithDishesCount.DishesCount.Keys)
                {
                    <div class="card m-3">
                     <div class="card-body">

                        @await Html.PartialAsync("_DisplayDish", dishWithStatus.Dish)

                        <p class="card-text">Amount: @orderWithDishesCount.DishesCount[dishWithStatus]</p>

                        <p class="card-text" id="dishstatus,@order.Id,@dishWithStatus.Dish.Id">
                            Dish Status: @dishWithStatus.OrderedDish.CurrentStatus</p>

                        <p id="error,@order.Id,@dishWithStatus.Dish.Id"></p>
                        <p id="success,@order.Id,@dishWithStatus.Dish.Id"></p>

                        <div id="dish_buttons,@dishWithStatus.OrderedDish.OrderId,@dishWithStatus.OrderedDish.DishId">

                        @{
                            string pending = OrderStatusEnum.Pending.ToString();
                            string preparing = OrderStatusEnum.Preparing.ToString();
                            string ready = OrderStatusEnum.Ready.ToString();
                            string currentStatus = dishWithStatus.OrderedDish.CurrentStatus.ToString();

                            @if (currentStatus.Equals(pending, StringComparison.OrdinalIgnoreCase))
                            {
                                <button type="button" class="btn btn-success m-2"
                                        onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@preparing')">
                                    Start cooking
                                </button>
                            }
                            else if (currentStatus.Equals(preparing, StringComparison.OrdinalIgnoreCase))
                            {
                                    <button type="button" class="btn btn-primary m-2"
                                    onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@pending')">
                                        Pending
                                    </button>

                                    <button type="button" class="btn btn-success m-2"
                                            onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@ready')">
                                        Dish Ready
                                    </button>

                            }
                            else if (currentStatus.Equals(ready, StringComparison.OrdinalIgnoreCase))
                            {
                                <button type="button" class="btn btn-success m-2"
                                        onclick="setStatus('@order.Id', '@dishWithStatus.Dish.Id', '@preparing')">
                                    Preparing
                                </button>
                            }
                        }
                        </div>
                    </div>
                    </div>
                }
                      </div>
            </div>
        }


    @if (Model.Orders.Count > 0)
    {
        <script>
            startWebSocket()
        </script>
    }

    @await Html.PartialAsync("_Footer")
</body>

