@using RestaurantSystem.Models.DatabaseModels;
@using RestaurantSystem.Models;
@model RestaurantSystem.Models.View.Order.OrdersViewModel;

@{
    ViewData["Title"] = "Orders";
}

<head>
    <link rel='stylesheet' type='text/css' media='screen' href='~/assets/index.css'>
    <link rel='stylesheet' type='text/css' media='screen' href='~/assets/dishes/dish.css'>

    @await Html.PartialAsync("_Imports")

    <script src='~/assets/orders/orders.js'></script>
    <script src='~/assets/dishes/dish.js'></script>
</head>

<body>
    @await Html.PartialAsync("_NavBar", Model.User)

    <h1>Orders</h1>

    @if (TempData["StartedOrder"] != null)
    {
        <h3>@TempData["StartedOrder"]</h3>
    }

    <div id="orders">
        @foreach (OrderWithDishesCountModel orderWithDish in Model.Orders)
        {
            <div class="order_view">
                <p class="status" id="status_@orderWithDish.Order.Id">CurrentStatus: @orderWithDish.Order.CurrentStatus</p>

                <div class="notes_view">
                    <p class="notes_title">Notes: </p>
                    <p class="notes">@orderWithDish.Order.Notes</p>
                </div>

                <div class="dish_list">
                    @foreach (DishModel dish in orderWithDish.DishesCount.Keys)
                    {
                        <p class="list_dish"> x @orderWithDish.DishesCount[dish] @dish.Name - @dish.AvrageTimeToCook minute/s</p>
                    }
                </div>

                <p class="part">TotalPrice: @orderWithDish.Order.TotalPrice lv.</p>

                <p class="part">Restorant Address: @string.Join(", ", 
                orderWithDish.Order.Restaurant.Address, orderWithDish.Order.Restaurant.City,
                orderWithDish.Order.Restaurant.State, orderWithDish.Order.Restaurant.Country)
                </p>

                <p class="part">Ordered At: @orderWithDish.Order.OrderedAt.ToString()</p>

                @if (!orderWithDish.Order.CurrentStatus.Equals("pending"))
                {
                    <button class="cancel noselect" style="opacity: 50%">Can't Stop Order</button>

                } else
                {
                    <button class="cancel noselect"
                    style="opacity: 100%"
                            onclick="cancelOrder('@orderWithDish.Order.Id')">
                        Cancel
                    </button>
                }

            </div>
        }
    </div>

    @if (Model.Orders.Count > 0)
    {
        <script>
            startWebSocket()
        </script>
    }
</body>

