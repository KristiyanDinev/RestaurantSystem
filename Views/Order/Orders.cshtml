@using RestaurantSystem.Models
@using RestaurantSystem.Models.DatabaseModels;
@using RestaurantSystem.Enums;
@model RestaurantSystem.Models.View.Order.OrdersViewModel;

@{
    ViewData["Title"] = "Orders";
}

<head>
    @await Html.PartialAsync("_Header")
    <script src="~/assets/index.js"></script>
    <script src='~/assets/orders/orders.js'></script>
    <script src='~/assets/dishes/dish.js'></script>
</head>

<body>
    @await Html.PartialAsync("_NavBar", Model.User)

    <h1>Orders</h1>

    @if (TempData.Peek("OrderedSuccess") != null)
    {
        <h3>Ordered successful</h3>
        TempData.Remove("OrderedSuccess");

    } else if (TempData.Peek("Canceled") != null)
    {
        <h3>Canceled Order successful</h3>
        TempData.Remove("Canceled");
    }

        @foreach (OrderWithDishesCountModel orderWithDish in Model.Orders)
        {

            <div class="card m-3">
                <div class="card-body">
                <h4 class="card-title" id="orderstatus,@orderWithDish.Order.Id">CurrentStatus: @orderWithDish.Order.CurrentStatus</h4>

                <p class="card-text">Notes: @orderWithDish.Order.Notes</p>

                
                    @foreach (DishWithStatusModel dishWithStatus in orderWithDish.DishesCount.Keys)
                    {
                        <div class="card m-2">
                            <div class="card-body">
                                @if (dishWithStatus.Dish.Image != null)
                                {
                                    <img src="@dishWithStatus.Dish.Image" class="img-thumbnail rounded"/>
                                }
                                <p class="card-title" id="dishstatus,@orderWithDish.Order.Id,@dishWithStatus.Dish.Id">
                                    Current Status: @dishWithStatus.OrderedDish.CurrentStatus</p>

                            <p class="card-text"> x @orderWithDish.DishesCount[dishWithStatus] 
                                @dishWithStatus.Dish.Name : @dishWithStatus.Dish.AvrageTimeToCook</p>
                            </div>
                        </div>
                    }

                <p class="card-text">Total Price: @orderWithDish.Order.TotalPrice lv.</p>

                <p class="card-text">Restorant Address: @string.Join(", ", 
                orderWithDish.Order.Restaurant.Address, orderWithDish.Order.Restaurant.City,
                orderWithDish.Order.Restaurant.State, orderWithDish.Order.Restaurant.Country)
                </p>

                <p class="card-text">Ordered At: @orderWithDish.Order.OrderedAt.ToString()</p>
                <p id="error,@orderWithDish.Order.Id"></p>

                @if (orderWithDish.Order.CurrentStatus.Equals(Status.Pending.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    <button onclick="cancelOrder('@orderWithDish.Order.Id')" type="button" class="btn btn-danger m-2" id="cancel,@orderWithDish.Order.Id">Cancel</button>

                } else
                {
                    <button type="button" class="btn btn-secondary m-2" id="cancel,@orderWithDish.Order.Id">Can't Cancel Order</button>
                }

            </div>
         </div>

            <script>
                registeredOrders.push(String(@orderWithDish.Order.Id))
                setCancelButton('@orderWithDish.Order.Id', '@orderWithDish.Order.CurrentStatus')
            </script>
        }

    @if (Model.Orders.Count > 0)
    {
        <script>
            startWebSocket()
        </script>
    }

    @await Html.PartialAsync("_Footer")
</body>

